// === –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã ===
const themeToggle = document.getElementById('themeToggle');
if (themeToggle) {
  if (localStorage.getItem('theme') === 'dark') {
    document.body.classList.add('dark');
    themeToggle.textContent = '‚òÄÔ∏è';
  }
  themeToggle.addEventListener('click', () => {
    document.body.classList.toggle('dark');
    const dark = document.body.classList.contains('dark');
    themeToggle.textContent = dark ? '‚òÄÔ∏è' : 'üåô';
    localStorage.setItem('theme', dark ? 'dark' : 'light');
  });
}

// –ü–µ—Ä–µ—Ö–æ–¥ —Å –≥–ª–∞–≤–Ω–æ–π –Ω–∞ —Ç—Ä–µ–Ω–∞–∂—ë—Ä
const startBtn = document.getElementById('startBtn');
if (startBtn) startBtn.addEventListener('click', () => location.href = 'trainer.html');

// ==== –õ–û–ì–ò–ö–ê –¢–†–ï–ù–ê–ñ–Å–†–ê ====
// –≠–ª–µ–º–µ–Ω—Ç—ã (–±—É–¥—É—Ç null –Ω–∞ –≥–ª–∞–≤–Ω–æ–π ‚Äî —ç—Ç–æ –æ–∫)
const wordEl          = document.getElementById('englishWord');
const transcriptionEl = document.getElementById('transcription');
const translationEl   = document.getElementById('translation');
const newWordBtn      = document.getElementById('newWordBtn');
const speakBtn        = document.getElementById('speakBtn');

let DICT = [];

// –≥—Ä—É–∑–∏–º —Å–ª–æ–≤–∞—Ä—å –∏–∑ JSON (–±–µ–∑ –∫—ç—à–∞)
async function loadDict() {
  if (DICT.length) return DICT;
  const res = await fetch('dictionary.json?ts=' + Date.now(), { cache: 'no-store' });
  if (!res.ok) throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å dictionary.json');
  DICT = await res.json();
  return DICT;
}

function pickRandom(arr) {
  return arr[Math.floor(Math.random() * arr.length)];
}

async function showRandomWord() {
  // –µ—Å–ª–∏ –º—ã –Ω–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ç—Ä–µ–Ω–∞–∂—ë—Ä–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º
  if (!wordEl || !transcriptionEl || !translationEl) return;
  const dict = await loadDict();
  const item = pickRandom(dict);
  wordEl.textContent          = item.en;
  transcriptionEl.textContent = item.ipa || '';
  translationEl.textContent   = item.ru  || '';
}

// –û–∑–≤—É—á–∫–∞ (Web Speech API)
let voices = [];
function loadVoices() {
  voices = window.speechSynthesis.getVoices() || [];
}
window.speechSynthesis.onvoiceschanged = loadVoices;
loadVoices();

function speak(text) {
  if (!text) return;
  const u = new SpeechSynthesisUtterance(text);
  const enVoice = voices.find(v => v.lang?.toLowerCase().startsWith('en-')) || null;
  if (enVoice) u.voice = enVoice;
  u.lang = enVoice?.lang || 'en-US';
  u.rate = 0.95;
  u.pitch = 1.0;
  u.volume = 1.0;
  window.speechSynthesis.cancel();
  window.speechSynthesis.speak(u);
}

// –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ‚Äî —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –µ—Å—Ç—å (–Ω–∞ —Ç—Ä–µ–Ω–∞–∂—ë—Ä–µ)
if (newWordBtn) newWordBtn.addEventListener('click', showRandomWord);
if (speakBtn)   speakBtn.addEventListener('click', () => speak(wordEl?.textContent?.trim()));

// –ø–æ–∫–∞–∑–∞—Ç—å —Å–ª–æ–≤–æ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ç—Ä–µ–Ω–∞–∂—ë—Ä–∞
showRandomWord().catch(console.error);

/* ====== –°–õ–û–í–ê–†–ò: HTML / CSS / JS ====== */
const DICT_HTML = [
  { en:"markup",    ipa:"/Ààm…ëÀêk åp/",     ru:"—Ä–∞–∑–º–µ—Ç–∫–∞",           tag:"HTML" },
  { en:"element",   ipa:"/Ààel…™m…ônt/",    ru:"—ç–ª–µ–º–µ–Ω—Ç",            tag:"HTML" },
  { en:"attribute", ipa:"/Àà√¶tr…™bjuÀêt/",  ru:"–∞—Ç—Ä–∏–±—É—Ç",            tag:"HTML" },
  { en:"header",    ipa:"/Ààhed…ô(r)/",    ru:"—à–∞–ø–∫–∞",              tag:"layout" },
  { en:"main",      ipa:"/me…™n/",        ru:"–æ—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å",   tag:"layout" },
  { en:"footer",    ipa:"/Ààf ät…ô(r)/",    ru:"–ø–æ–¥–≤–∞–ª",             tag:"layout" },
  { en:"paragraph", ipa:"/Ààp√¶r…ô…°r…ëÀêf/",  ru:"–∞–±–∑–∞—Ü",              tag:"text" },
  { en:"heading",   ipa:"/Ààhed…™≈ã/",      ru:"–∑–∞–≥–æ–ª–æ–≤–æ–∫",          tag:"text" },
  { en:"doctype",   ipa:"/Ààd…íkta…™p/",    ru:"—Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞",      tag:"meta" },
  { en:"metadata",  ipa:"/Ààmet…ôÀåde…™t…ô/", ru:"–º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ",         tag:"meta" },
  { en:"language",  ipa:"/Ààl√¶≈ã…°w…™d í/",   ru:"—è–∑—ã–∫",               tag:"meta" },
];

const DICT_CSS = [
  { en:"selector",  ipa:"/s…™Ààlekt…ô(r)/", ru:"—Å–µ–ª–µ–∫—Ç–æ—Ä",           tag:"CSS" },
  { en:"property",  ipa:"/Ààpr…íp…ôti/",    ru:"—Å–≤–æ–π—Å—Ç–≤–æ",           tag:"CSS" },
  { en:"value",     ipa:"/Ààv√¶ljuÀê/",     ru:"–∑–Ω–∞—á–µ–Ω–∏–µ",           tag:"CSS" },
  { en:"margin",    ipa:"/Ààm…ëÀêd í…™n/",    ru:"–≤–Ω–µ—à–Ω–∏–π –æ—Ç—Å—Ç—É–ø",     tag:"layout" },
  { en:"padding",   ipa:"/Ààp√¶d…™≈ã/",      ru:"–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –æ—Ç—Å—Ç—É–ø",  tag:"layout" },
  { en:"flexbox",   ipa:"/Ààfleksb…íks/",  ru:"—Ñ–ª–µ–∫—Å–±–æ–∫—Å",          tag:"layout" },
  { en:"grid",      ipa:"/…°r…™d/",        ru:"–≥—Ä–∏–¥",               tag:"layout" },
];

const DICT_JS = [
  { en:"variable",  ipa:"/Ààve…ôri…ôbl/",   ru:"–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è",         tag:"JS" },
  { en:"function",  ipa:"/Ààf å≈ãk Én/",     ru:"—Ñ—É–Ω–∫—Ü–∏—è",            tag:"JS" },
  { en:"array",     ipa:"/…ôÀàre…™/",       ru:"–º–∞—Å—Å–∏–≤",             tag:"JS" },
  { en:"object",    ipa:"/Àà…íbd í…™kt/",    ru:"–æ–±—ä–µ–∫—Ç",             tag:"JS" },
  { en:"loop",      ipa:"/luÀêp/",        ru:"—Ü–∏–∫–ª",               tag:"JS" },
  { en:"condition", ipa:"/k…ônÀàd…™ Én/",    ru:"—É—Å–ª–æ–≤–∏–µ",            tag:"JS" },
];

/* ====== –†–µ–Ω–¥–µ—Ä —Å–ª–æ–≤–∞—Ä—è + –≤–∫–ª–∞–¥–∫–∏ –≤–Ω—É—Ç—Ä–∏ –±–ª–æ–∫–∞ —Å–ª–æ–≤–∞—Ä—è ====== */
(function initLearnDict(){
  const dictPanel = document.querySelector('.panel.dict');
  if (!dictPanel) return;               // –º—ã –Ω–µ –Ω–∞ learn.html

  const tabs   = dictPanel.querySelectorAll('.dict-tab');
  const search = document.getElementById('dictSearch');
  const list   = document.getElementById('dictList');

  const DATA = { html: DICT_HTML, css: DICT_CSS, js: DICT_JS };
  let topic = 'html';

  function match(item, q) {
    const en = (item.en || '').toLowerCase();
    const ru = (item.ru || '').toLowerCase();
    const tg = (item.tag||'').toLowerCase();
    return en.includes(q) || ru.includes(q) || tg.includes(q);
  }

  function render() {
    const q = (search.value || '').trim().toLowerCase();
    const src = DATA[topic] || [];
    const filtered = q ? src.filter(it => match(it, q)) : src;

    list.innerHTML = filtered.map(it => `
      <li class="dict-item">
        <div class="word">
          <span class="en">${it.en}</span>
          <span class="ipa">${it.ipa || ''}</span>
          <button class="speak" type="button" data-word="${it.en}" title="–ü—Ä–æ–∏–∑–Ω–µ—Å—Ç–∏">üîä</button>
        </div>
        <div class="ru">${it.ru || ''}</div>
        <div class="tag">${(it.tag || '').toUpperCase()}</div>
      </li>
    `).join('') || `<li class="dict-item">–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</li>`;

    // –æ–∑–≤—É—á–∫–∞
    list.querySelectorAll('.speak').forEach(btn=>{
      btn.onclick = () => typeof speak === 'function' && speak(btn.dataset.word);
    });
  }

  // –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫ —Å–ª–æ–≤–∞—Ä—è
  tabs.forEach(btn=>{
    btn.addEventListener('click', ()=>{
      tabs.forEach(b=>b.classList.remove('active'));
      btn.classList.add('active');
      topic = btn.dataset.topic;        // html | css | js
      render();
    });
  });

  search.addEventListener('input', render);
  render();
})();


/* ====== –ü–µ—Å–æ—á–Ω–∏—Ü–∞: –∑–∞–ø—É—Å–∫ –∫–æ–¥–∞ –≤ iframe ====== */
(function initSandbox(){
  const btn = document.getElementById('runCode');
  const edHtml = document.getElementById('edHtml');
  const edCss  = document.getElementById('edCss');
  const edJs   = document.getElementById('edJs');
  const frame  = document.getElementById('resultFrame');
  if (!btn || !edHtml || !edCss || !edJs || !frame) return;

  btn.addEventListener('click', () => {
    const html = edHtml.value || '';
    const css  = `<style>${edCss.value || ''}</style>`;
    const js   = `<script>(function(){try{${edJs.value || ''}}catch(e){console.error(e)}})();<\/script>`;

    const doc = frame.contentDocument || frame.contentWindow.document;
    doc.open();
    doc.write(`${html}\n${css}\n${js}`);
    doc.close();
  });
})();

/* ====== –û–∑–≤—É—á–∫–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ, —á—Ç–æ –∏ –Ω–∞ —Ç—Ä–µ–Ω–∞–∂—ë—Ä–µ) ====== */
let __voices = [];
window.speechSynthesis?.addEventListener('voiceschanged', () => {
  __voices = window.speechSynthesis.getVoices() || [];
});
__voices = window.speechSynthesis?.getVoices?.() || [];

function speak(text){
  if (!window.speechSynthesis || !text) return;
  const u = new SpeechSynthesisUtterance(text);
  const v = __voices.find(v => v.lang?.toLowerCase().startsWith('en')) || null;
  if (v) u.voice = v;
  u.lang = v?.lang || 'en-US';
  u.rate = 0.95; u.pitch = 1; u.volume = 1;
  window.speechSynthesis.cancel();
  window.speechSynthesis.speak(u);
}

